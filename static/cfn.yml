AWSTemplateFormatVersion: '2010-09-09'
Description: Base stack to create a Cloud9 instance for use with EKS Blueprint workshop

Parameters:
  # EKS Parameters
  Cloud9IDEInstanceType:
    Description: The type of instance to connect to the environment
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge

  EksWorkshopC9InstanceVolumeSize: 
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume. 
    Default: 30  

  WorkshopSetup:
    Description: Workshop Setup.
    Default: workshop-on-your-own-account
    Type: String
    AllowedValues:
      - workshop-on-your-own-account
      - aws-event
    ConstraintDescription: must specify aws-event or workshop-on-your-own-account.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Cloud9 Configuration'
        Parameters:
          - EksWorkshopC9InstanceVolumeSize
          - Cloud9IDEInstanceType
          - WorkshopSetup

Conditions:
  CreateAWSEventResources: !Equals [!Ref WorkshopSetup, aws-event]

Mappings:
  InstanceRole:
    Role:
      "Name": "eks-blueprints-for-terraform-workshop-admin"
    

Resources:
  EKSEnvironment:
    Type: AWS::Cloud9::EnvironmentEC2
    DependsOn:
      - EKSWorkshopRole    
    Properties:
      Name: !Join ['-', ['eks-terraform-blueprint-workshop', !Ref AWS::StackName]]
      AutomaticStopTimeMinutes: 3600
      OwnerArn:
          !If [
            CreateAWSEventResources,
            !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':assumed-role/', !FindInMap [InstanceRole, "Role", "Name"], '/MasterKey']],
            !Ref 'AWS::NoValue',
          ]
      Description: Use this to work with EKS Labs
      InstanceType: !Ref Cloud9IDEInstanceType
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      Tags:
        - Key: SSMBootstrap
          Value: Active
        - Key: Environment
          Value: !Join ['-', ['eks-terraform-blueprint-workshop', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]

  EKSWorkshopRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !FindInMap [InstanceRole, "Role", "Name"]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codebuild.amazonaws.com
                - ssm.amazonaws.com
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EKSEnvironmentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: [EKSWorkshopRole]
    Properties:
      InstanceProfileName: !FindInMap [InstanceRole, "Role", "Name"]
      Path: /
      Roles:
        - Ref: EKSWorkshopRole

  RunCommandLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub ssm.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "${RunCommandLogGroup.Arn}:*"
          PolicyName: Cloud9Initialize

  Cloud9InitializerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*            
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DescribeVolumes
                  - ec2:ModifyVolume
                  - ec2:DescribeVolumesModifications
                  - ec2:RebootInstances
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                  - ssm:DescribeInstanceInformation
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ssm:UpdateDocument
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt SSMRole.Arn
              - Effect: Allow
                Action:
                - sts:AssumeRole
                Resource: !GetAtt EKSWorkshopRole.Arn                
          PolicyName: Cloud9Initialize

  Cloud9Initializer:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
    - Cloud9InitializerRole    
    Properties:
      ServiceToken: !GetAtt Cloud9InitializerFunction.Arn
      EKSEnvironmentId: !Ref EKSEnvironment
      LabIdeInstanceProfileName: !Ref EKSEnvironmentInstanceProfile
      LabIdeInstanceProfileArn: !GetAtt EKSEnvironmentInstanceProfile.Arn
      SsmRoleArn: !GetAtt SSMRole.Arn
      LogGroupName: !Ref RunCommandLogGroup
      AccountId: !Sub "${AWS::AccountId}"
      Region: !Sub "${AWS::Region}"
      InstanceRoleArn: !GetAtt EKSWorkshopRole.Arn
      SsmDocument: !Ref EksWorkshopC9SSMDocument
      EKSWorkshopRole: !Ref EKSWorkshopRole
      CreateAWSEventResources: !If [CreateAWSEventResources, 'true', 'false']

  Cloud9InitializerFunction:
    Type: AWS::Lambda::Function
    DependsOn: [EKSEnvironment]
    Properties:
      Role: !GetAtt Cloud9InitializerRole.Arn
      Runtime: python3.12
      Handler: index.lambda_handler
      Environment:
        Variables:
          DiskSize:
            Ref: EksWorkshopC9InstanceVolumeSize
      MemorySize: 256
      Timeout: '900'
      Code:
        ZipFile: |
          from __future__ import print_function        
          import cfnresponse
          import boto3
          import json
          import time
          import os
          import traceback
          import logging
          logger = logging.getLogger(__name__)          

          def lambda_handler(event, context):
              print(event)
              print(event.values())
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  print('Deleting Event')
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')  
                  return

              print('Creating Event')
              try:
                  # Open AWS clients
                  ec2 = boto3.client('ec2')
                  ssm = boto3.client('ssm')              
                  sts_client = boto3.client('sts')
                  session = boto3.session.Session()
    
                  account_id = session.client('sts').get_caller_identity()['Account']

                  environmentId = event['ResourceProperties']['EKSEnvironmentId']

                  print('Assume Role: ' + event['ResourceProperties']['InstanceRoleArn'] )
                  assumed_role_object=sts_client.assume_role(
                      RoleArn=event['ResourceProperties']['InstanceRoleArn'],
                      RoleSessionName="MasterKey"
                  )

                  creds = assumed_role_object['Credentials']

                  cloud9 = boto3.client('cloud9',
                      aws_access_key_id=creds['AccessKeyId'],
                      aws_secret_access_key=creds['SecretAccessKey'],
                      aws_session_token=creds['SessionToken']
                  )

                  #Try association for aws event
                  createAWSEventResources = event['ResourceProperties']['CreateAWSEventResources']
                  print(f"CreateAWSEventResources = {createAWSEventResources}")                
                  if createAWSEventResources == 'true': 
                    try:
                      print('update cloud9 environment membership')
                      cloud9.create_environment_membership(
                          environmentId=environmentId,
                          permissions='read-write',
                          userArn=f'arn:aws:sts::{account_id}:assumed-role/WSParticipantRole/Participant'
                      )

                      cloud9.create_environment_membership(
                          environmentId=environmentId,
                          permissions='read-write',
                          userArn=f'arn:aws:sts::{account_id}:assumed-role/WSOpsRole/Ops',
                      )
                    except Exception as e:
                        print("user may not exists if not an aws-event")
                        print(traceback.format_exc())

                  #If on-your-own we don't update the cloud9 because we don't have the permission neither we know the role arn to use
                  #Customer should be flagged to do it manually in workshop instructions!
                  if createAWSEventResources == 'true': 
                    cloud9.update_environment(
                        environmentId=environmentId,
                        managedCredentialsAction='DISABLE'
                    )

                  # Get the InstanceId of the Cloud9 IDE
                  instance = ec2.describe_instances(Filters=[{'Name': 'tag:aws:cloud9:environment','Values': [event['ResourceProperties']['EKSEnvironmentId']]}])['Reservations'][0]['Instances'][0]
                  print('instance: {}'.format(instance))
                  instance_id = instance['InstanceId']

                  # Get the Cloud9 SecurityGroup
                  security_group_id = instance['NetworkInterfaces'][0]['Groups'][0]['GroupId']
                  print('Instance ID: ' + instance_id);
                  print('Security Group ID: ' + security_group_id);

                  # Create the IamInstanceProfile request object
                  iam_instance_profile = {
                      'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                      'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                  }
                  print('Found IAM instance profile: {}'.format(iam_instance_profile))

                  time.sleep(10)
                  print('Waiting for the instance to be ready...')
      
                  # Wait for Instance to become ready before adding Role
                  instance_state = instance['State']['Name']
                  print('instance_state: {}'.format(instance_state))
                  waiter = ec2.get_waiter('instance_running')
                  waiter.wait(InstanceIds=[instance_id])
                  instance_state = ec2.describe_instances(InstanceIds=[instance_id])
                  print('instance_state: {}'.format(instance_state))

                  print('Instance is ready')

                  #Associate cloud9 with appropriate IAM Role
                  associations = ec2.describe_iam_instance_profile_associations(
                      Filters=[
                          {
                              'Name': 'instance-id',
                              'Values': [instance_id],
                          },
                      ],
                  )

                  if len(associations['IamInstanceProfileAssociations']) > 0:
                    print('Replacing existing IAM profile...')
                    for association in associations['IamInstanceProfileAssociations']:
                      if association['State'] == 'associated':
                        print("{} is active with state {}".format(association['AssociationId'], association['State']))
                        ec2.replace_iam_instance_profile_association(AssociationId=association['AssociationId'], IamInstanceProfile=iam_instance_profile)
                  else:
                    print('Associating IAM profile...')
                    ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance_id)

                  #Check Cloud9 instance volume size
                  block_volume_id = instance['BlockDeviceMappings'][0]['Ebs']['VolumeId']

                  block_device = ec2.describe_volumes(VolumeIds=[block_volume_id])['Volumes'][0]

                  DiskSize = int(os.environ['DiskSize'])
                  if block_device['Size'] < DiskSize:
                    ec2.modify_volume(VolumeId=block_volume_id,Size=DiskSize)
                    print('Modifying block volume: {}'.format(block_volume_id))
                    time.sleep(10)

                    for i in range(1, 30):
                      response = ec2.describe_volumes_modifications(
                        VolumeIds=[
                          block_volume_id
                        ]
                      )
                      modify_state = response['VolumesModifications'][0]['ModificationState']
                      if modify_state != 'modifying':
                        print('Volume has been resized')
                        break
                      time.sleep(10)
                  else:
                    print('Volume is already sized')    


                  # Reboot is required to avoid weird race condition with IAM role and SSM agent
                  # It also causes the file system to expand in the OS
                  print('Rebooting instance')
                  ec2.reboot_instances(
                      InstanceIds=[
                          instance_id,
                      ],
                  )

                  time.sleep(60)

                  print('Waiting for instance to come online in SSM...')

                  for i in range(1, 60):
                    response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}])
                    if len(response["InstanceInformationList"]) == 0:
                      print('No instances in SSM')
                    elif len(response["InstanceInformationList"]) > 0 and \
                          response["InstanceInformationList"][0]["PingStatus"] == "Online" and \
                          response["InstanceInformationList"][0]["InstanceId"] == instance_id:
                      print('Instance is online in SSM')
                      break
                    time.sleep(10)     

                  ssm_document = event['ResourceProperties']['SsmDocument']
                  print('Sending SSM command...')

                  response = ssm.send_command(
                    InstanceIds=[instance_id],
                    DocumentName=ssm_document)
            
                  command_id = response['Command']['CommandId']

                  waiter = ssm.get_waiter('command_executed')

                  waiter.wait(
                    CommandId=command_id,
                    InstanceId=instance_id,
                    WaiterConfig={
                      'Delay': 10,
                      'MaxAttempts': 30
                    }
                  )

                  print(response)
                  responseData = {
                    'Success': 'Started bootstrapping for instance: '+instance_id,
                    'SecurityGroupId': security_group_id,
                    'additional': 'output2'
                  }
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

              except Exception as e:
                  status = cfnresponse.FAILED
                  print(traceback.format_exc())
                  responseData = {'Error': traceback.format_exc(e)}
              finally:
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              print('end init')                     
  
  EksWorkshopC9SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: !Join ['-', ['eks-terraform-blueprint-workshop', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: C9bootstrap
            inputs:
              runCommand:
              - !Sub |
                set -x -e
                #set -x
                date
                id
                pwd
                export HOME=/home/ec2-user
                echo '=== INSTALL Some Tools ==='
                sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
                sudo yum -y -q install jq gettext bash-completion moreutils terraform tree

                echo '=== Configure workshop code ==='
                su -l -c 'aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com' ec2-user
                curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
                unzip -o -q awscliv2.zip -d /tmp
                sudo /tmp/aws/install --update
                rm -rf aws awscliv2.zip

                curl -sSL -o /tmp/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.2/2023-10-12/bin/linux/amd64/kubectl
                chmod +x /tmp/kubectl
                mv /tmp/kubectl /usr/local/bin/kubectl
                echo "source <(kubectl completion bash)" >> /home/ec2-user/.bash_completion
                echo "complete -F __start_kubectl k" >> /home/ec2-user/.bashrc
                echo ". /etc/profile.d/bash_completion.sh" >> /home/ec2-user/.bashrc
                echo ". /home/ec2-user/.bash_completion" >> /home/ec2-user/.bashrc

                curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                chmod +x /tmp/eksctl
                sudo mv /tmp/eksctl /usr/local/bin
                curl -sSL "https://github.com/awslabs/eksdemo/releases/download/v0.12.0/eksdemo_Linux_x86_64.tar.gz" | tar xz -C /tmp
                chmod +x /tmp/eksdemo
                mv /tmp/eksdemo /usr/local/bin   

                curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
                sudo curl -Lo /usr/local/bin/kubectl-argo-rollouts https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
                sudo chmod +x /usr/local/bin/kubectl-argo-rollouts
                curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
                rm argocd-linux-amd64
                curl -sS https://webinstall.dev/k9s | bash
                sudo curl -L https://github.com/awslabs/eks-node-viewer/releases/download/v0.2.1/eks-node-viewer_Linux_x86_64 -o /usr/local/bin/eks-node-viewer  && sudo chmod +x $_

                sudo chown -R ec2-user:ec2-user /home/ec2-user/.*
                su -l -c 'helm repo add eks https://aws.github.io/eks-charts' ec2-user
                su -l -c 'helm repo update' ec2-user

                #Install Krew and stern
                su -l -c "(cd \$(mktemp -d) && pwd &&
                  OS=\$(uname | tr '[:upper:]' '[:lower:]') &&
                  ARCH=\$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/') &&
                  KREW=krew-\${!OS}_\${!ARCH} && echo \$KREW
                  curl -fsSLO \"https://github.com/kubernetes-sigs/krew/releases/latest/download/\${!KREW}.tar.gz\" &&
                  tar zxvf \${!KREW}.tar.gz &&
                  ./\${!KREW} install krew
                )" ec2-user 
                su -l -c 'echo "export PATH=${!KREW_ROOT:-/home/ec2-user/.krew}/bin:$PATH" | tee -a ~/.bashrc &&
                source /home/ec2-user/.bashrc &&
                kubectl krew install stern' ec2-user

                su -l -c 'echo "export TERM=xterm-color" >> /home/ec2-user/.bashrc' ec2-user

                git clone --depth 1 https://github.com/junegunn/fzf.git /home/ec2-user/.fzf
                /home/ec2-user/.fzf/install --all
                sudo curl https://raw.githubusercontent.com/blendle/kns/master/bin/kns -o /usr/local/bin/kns && sudo chmod +x $_
                sudo curl https://raw.githubusercontent.com/blendle/kns/master/bin/ktx -o /usr/local/bin/ktx && sudo chmod +x $_
                echo "alias kgn='kubectl get nodes -L beta.kubernetes.io/arch -L eks.amazonaws.com/capacityType -L beta.kubernetes.io/instance-type -L eks.amazonaws.com/nodegroup -L topology.kubernetes.io/zone -L karpenter.sh/provisioner-name -L karpenter.sh/capacity-type'" | tee -a /home/ec2-user/.bashrc
                echo "alias k=kubectl" | tee -a /home/ec2-user/.bashrc
                echo "alias ll='ls -la'" | tee -a /home/ec2-user/.bashrc
                echo "alias kgp='kubectl get pods'" | tee -a /home/ec2-user/.bashrc
                echo "alias tfi='terraform init'" | tee -a /home/ec2-user/.bashrc
                echo "alias tfp='terraform plan'" | tee -a /home/ec2-user/.bashrc
                echo "alias tfo='terraform output'" | tee -a /home/ec2-user/.bashrc
                echo "alias tfy='terraform apply --auto-approve'" | tee -a /home/ec2-user/.bashrc
                echo "alias kctx=ktx" | tee -a /home/ec2-user/.bashrc

                echo '=== Installing c9 ==='
                su -l -c '$NVM_BIN/npm  i -g c9' ec2-user            

                echo '=== Exporting ENV Vars ==='
                su -l -c 'echo "export AWS_ACCOUNT_ID=${AWS::AccountId}" >> ~/.bashrc' ec2-user
                su -l -c 'echo "export ACCOUNT_ID=${AWS::AccountId}" >> ~/.bashrc' ec2-user
                su -l -c 'echo "export AWS_DEFAULT_REGION=${AWS::Region}" >> ~/.bashrc' ec2-user
                su -l -c 'echo "export AWS_REGION=${AWS::Region}" >> ~/.bashrc' ec2-user

                su -l -c 'aws configure set default.region ${AWS::Region}' ec2-user
                su -l -c 'aws configure set cli_pager ""' ec2-user

                echo "source ~/.bashrc" | tee -a /home/ec2-user/.bash_profile

                sudo chown -R ec2-user:ec2-user /home/ec2-user/
                sudo chown -R ec2-user:ec2-user /home/ec2-user/.*
                echo "Bootstrap completed with return code $?"
                shutdown -r +1

Outputs:
  EKSCloud9EnvId:
    Description: ID of the EKS Lab IDE
    Value: !Sub 
          - https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${logicalId}
          - logicalId: !Ref EKSEnvironment

